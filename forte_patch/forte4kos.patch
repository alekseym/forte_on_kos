From fe261982c06b6e45a6b9c9357b8704efd7a96985 Mon Sep 17 00:00:00 2001
From: Alex Maksimov <almaximort@yandex.ru>
Date: Fri, 13 May 2022 02:25:11 +0300
Subject: [PATCH 1/3] Initial version of KOS layer

---
 setup_kos.sh                             |  59 +++++++
 src/arch/CMakeLists.txt                  |   1 +
 src/arch/kos/CMakeLists.txt              |  71 +++++++++
 src/arch/kos/forte_architecture_time.cpp |  24 +++
 src/arch/kos/forte_sem.cpp               | 115 +++++++++++++
 src/arch/kos/forte_sem.h                 |  88 ++++++++++
 src/arch/kos/forte_sync.cpp              |  21 +++
 src/arch/kos/forte_sync.h                |  72 +++++++++
 src/arch/kos/forte_thread.cpp            |  90 +++++++++++
 src/arch/kos/forte_thread.h              |  76 +++++++++
 src/arch/kos/fortealloc.h                |  18 +++
 src/arch/kos/main.cpp                    | 117 ++++++++++++++
 src/arch/kos/pctimeha.cpp                |  79 +++++++++
 src/arch/kos/pctimeha.h                  |  52 ++++++
 src/arch/kos/posixsercommlayer.cpp       | 195 +++++++++++++++++++++++
 src/arch/kos/posixsercommlayer.h         |  35 ++++
 src/arch/kos/sockhand.h                  |  32 ++++
 17 files changed, 1145 insertions(+)
 create mode 100755 setup_kos.sh
 create mode 100644 src/arch/kos/CMakeLists.txt
 create mode 100644 src/arch/kos/forte_architecture_time.cpp
 create mode 100644 src/arch/kos/forte_sem.cpp
 create mode 100644 src/arch/kos/forte_sem.h
 create mode 100644 src/arch/kos/forte_sync.cpp
 create mode 100644 src/arch/kos/forte_sync.h
 create mode 100644 src/arch/kos/forte_thread.cpp
 create mode 100644 src/arch/kos/forte_thread.h
 create mode 100644 src/arch/kos/fortealloc.h
 create mode 100644 src/arch/kos/main.cpp
 create mode 100644 src/arch/kos/pctimeha.cpp
 create mode 100644 src/arch/kos/pctimeha.h
 create mode 100644 src/arch/kos/posixsercommlayer.cpp
 create mode 100644 src/arch/kos/posixsercommlayer.h
 create mode 100644 src/arch/kos/sockhand.h

diff --git a/setup_kos.sh b/setup_kos.sh
new file mode 100755
index 00000000..acf943cb
--- /dev/null
+++ b/setup_kos.sh
@@ -0,0 +1,59 @@
+#!/bin/bash
+echo "----------------------------------------------------------------------------"
+echo " Automatically set up development environment for POSIX-platform"
+echo "----------------------------------------------------------------------------"
+echo ""
+echo " Includes 64bit-datatypes, float-datatypes, Ethernet-Interface,"
+echo " ASN1-encoding, ..."
+echo ""
+echo " To include tests set directories for boost-test-framework and "
+echo " set FORTE_TESTS-option to 'ON'"
+echo ""
+echo "----------------------------------------------------------------------------"
+
+
+
+export LANG=C
+export TARGET="arm-kos"
+export PKG_CONFIG=""
+export SDK_PREFIX="/opt/KasperskyOS-Community-Edition-1.0.1.4"
+BUILD_SIM_TARGET="y"
+export PATH="$SDK_PREFIX/toolchain/bin:$PATH"
+
+#cmake -G "Unix Makefiles" \
+#      -D CMAKE_BUILD_TYPE:STRING=Debug \
+#      -D CMAKE_INSTALL_PREFIX:STRING=$BUILD/../install \
+#      -D CMAKE_TOOLCHAIN_FILE=$SDK_PREFIX/toolchain/share/toolchain-arm-kos.cmake
+
+
+
+
+
+export forte_bin_dir="bin/kos"
+
+#set to boost-include directory
+export forte_boost_test_inc_dirs=""
+#set to boost-library directory
+export forte_boost_test_lib_dirs=""
+
+if [ ! -d "$forte_bin_dir" ]; then
+  mkdir -p "$forte_bin_dir"
+fi
+
+if [ -d "$forte_bin_dir" ]; then
+  
+  echo "For building forte go to $forte_bin_dir and execute \"make\""
+  echo "forte can be found at ${forte_bin_dir}/src"
+  echo "forte_tests can be found at ${forte_bin_dir}/tests"
+  
+  
+  cd "./$forte_bin_dir"
+  
+  cmake -G "Unix Makefiles" -DFORTE_ARCHITECTURE=kos -DFORTE_COM_ETH=ON -DFORTE_COM_FBDK=ON -DFORTE_COM_LOCAL=ON -DFORTE_TESTS=OFF -DFORTE_TESTS_INC_DIRS=${forte_boost_test_inc_dirs} -DFORTE_TESTS_LINK_DIRS=${forte_boost_test_inc_dirs} -DFORTE_MODULE_CONVERT=ON -DFORTE_MODULE_IEC61131=ON -DFORTE_MODULE_UTILS=ON ../../ \
+   -D CMAKE_BUILD_TYPE:STRING=Debug \
+   -D CMAKE_INSTALL_PREFIX:STRING=$BUILD/../install \
+   -D CMAKE_TOOLCHAIN_FILE=$SDK_PREFIX/toolchain/share/toolchain-arm-kos.cmake
+else
+  echo "unable to create ${forte_bin_dir}"
+  exit 1
+fi
diff --git a/src/arch/CMakeLists.txt b/src/arch/CMakeLists.txt
index e69df6e6..197b46f3 100644
--- a/src/arch/CMakeLists.txt
+++ b/src/arch/CMakeLists.txt
@@ -25,6 +25,7 @@ add_subdirectory(posix)
 add_subdirectory(rcX)
 add_subdirectory(vxworks)
 add_subdirectory(win32)
+add_subdirectory(kos)
 
 add_subdirectory(utils)
 
diff --git a/src/arch/kos/CMakeLists.txt b/src/arch/kos/CMakeLists.txt
new file mode 100644
index 00000000..beaf64f2
--- /dev/null
+++ b/src/arch/kos/CMakeLists.txt
@@ -0,0 +1,71 @@
+#*******************************************************************************
+# Copyright (c) 2010 - 2015 ACIN, Profactor GmbH, fortiss GmbH
+# This program and the accompanying materials are made available under the
+# terms of the Eclipse Public License 2.0 which is available at
+# http://www.eclipse.org/legal/epl-2.0.
+#
+# SPDX-License-Identifier: EPL-2.0
+# 
+# Contributors:
+#   Alois Zoitl, Gerhard Ebenhofer, Ingo Hegny, Martin Melik Merkumians
+# *      - initial API and implementation and/or initial documentation
+# *******************************************************************************/
+
+SET(SOURCE_GROUP ${SOURCE_GROUP}\\kos)
+
+forte_add_architecture(kos)
+
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+
+  forte_add_include_directories(${CMAKE_CURRENT_SOURCE_DIR})
+  
+  forte_set_timer(pctimeha)
+  
+  forte_add_sourcefile_hcpp(forte_thread forte_sync forte_sem)
+  forte_add_sourcefile_cpp(../genforte_printer.cpp)
+  forte_add_sourcefile_h(../forte_architecture_time.h)
+  forte_add_sourcefile_hcpp(../utils/timespec_utils)
+  forte_add_sourcefile_cpp(../genforte_realFunctions.cpp forte_architecture_time.cpp)
+  forte_add_to_executable_cpp(main)
+  
+
+  if(FORTE_COM_ETH)
+   forte_add_handler(CFDSelectHandler sockhand)
+   forte_add_sourcefile_hcpp( ../fdselecthand ../bsdsocketinterf)
+   forte_add_sourcefile_h(../gensockhand.h)
+   forte_add_sourcefile_h(sockhand.h)
+  endif(FORTE_COM_ETH)
+
+  #forte_add_link_library(pthread)
+
+  forte_add_definition("-W -Wall -Wextra -Woverloaded-virtual -Wconversion -Wshadow -DFORTE_LITTLE_ENDIAN")
+  
+  set(FORTE_POSIX_GENERATE_MAP_FILE FALSE CACHE BOOL "Enable the generation of map files")
+  mark_as_advanced(FORTE_POSIX_GENERATE_MAP_FILE)
+  IF(FORTE_POSIX_GENERATE_MAP_FILE)
+    forte_add_link_flags("-Wl,-M -Wl,-Map -Wl,forte.map -Wl,-cref")
+  ENDIF(FORTE_POSIX_GENERATE_MAP_FILE)  
+  
+  forte_add_link_library("-lpthread") 
+#  forte_add_link_library("-lrt") 
+
+
+  forte_add_network_layer(SER OFF "ser" CPosixSerCommLayer posixsercommlayer "Enable Forte serial line communication")
+  
+  set(FORTE_RTTI_AND_EXCEPTIONS FALSE CACHE BOOL "Enable RTTI and Exceptions")
+  mark_as_advanced(FORTE_RTTI_AND_EXCEPTIONS)
+  
+  if(FORTE_TESTS AND FORTE_USE_TEST_CONFIG_IN_FORTE)
+    forte_add_definition("-DBOOST_TEST_DYN_LINK -g -O0 --coverage -fno-inline -fno-elide-constructors -fsanitize=address")
+    forte_add_link_library("-fsanitize=address")
+    forte_add_link_library("--coverage")
+  else()
+    IF(NOT FORTE_RTTI_AND_EXCEPTIONS)
+      forte_add_definition("-fno-rtti -fno-exceptions")
+    ENDIF(NOT FORTE_RTTI_AND_EXCEPTIONS)
+  endif(FORTE_TESTS AND FORTE_USE_TEST_CONFIG_IN_FORTE)
+  
+
+
+    
+endif()
\ No newline at end of file
diff --git a/src/arch/kos/forte_architecture_time.cpp b/src/arch/kos/forte_architecture_time.cpp
new file mode 100644
index 00000000..eba299eb
--- /dev/null
+++ b/src/arch/kos/forte_architecture_time.cpp
@@ -0,0 +1,24 @@
+/*******************************************************************************
+ * Copyright (c) 2019 TU Wien/ACIN
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Martin Melik Merkumians - Adds getNanoSecondsMonotonic
+ *******************************************************************************/
+
+#include <time.h>
+
+#include "forte_architecture_time.h"
+#include "forte_constants.h"
+
+uint_fast64_t getNanoSecondsMonotonic() {
+  struct timespec now;
+  clock_gettime(CLOCK_MONOTONIC, &now);
+  return now.tv_nsec + now.tv_sec * forte::core::constants::cNanosecondsPerSecond;
+}
+
+
diff --git a/src/arch/kos/forte_sem.cpp b/src/arch/kos/forte_sem.cpp
new file mode 100644
index 00000000..9cf2ca86
--- /dev/null
+++ b/src/arch/kos/forte_sem.cpp
@@ -0,0 +1,115 @@
+/*******************************************************************************
+ * Copyright (c) 2016, 2020 fortiss GmbH, TU Vienna/ACIN, OFFIS e.V.
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl - initial API and implementation and/or initial documentation
+ *  Peter Gsellmann, Martin Melik-Merkumians - adds timed wait and try and no wait
+ *    and documentation
+ *  JÃ¶rg Walter - make timed wait work withoout busy-loop, switch to binary
+ *    semaphore
+ *
+ *******************************************************************************/
+
+#include <cerrno>
+#include <cstring>
+#include <ctime>
+#include <cassert>
+
+#include "forte_sem.h"
+#include "../devlog.h"
+#include "../utils/timespec_utils.h"
+#include <criticalregion.h>
+
+namespace forte {
+  namespace arch {
+
+    CPThreadSemaphore::CPThreadSemaphore(bool paInitialValue) : mPosted(paInitialValue){
+      pthread_condattr_t condAttr;
+
+      if (pthread_condattr_init(&condAttr) != 0) {
+        DEVLOG_ERROR("Could not initialize cv attributes\n");
+      }
+      if (pthread_condattr_setclock(&condAttr, CLOCK_MONOTONIC) != 0) {
+        DEVLOG_ERROR("Could not set cv clock\n");
+      }
+      if (pthread_cond_init(&mCond, &condAttr) != 0) {
+        DEVLOG_ERROR("Could not initialize condition variable\n");
+      }
+      pthread_condattr_destroy(&condAttr);
+    }
+
+    
+    CPThreadSemaphore::~CPThreadSemaphore(){
+      pthread_cond_destroy(&mCond);
+    }
+
+
+    void CPThreadSemaphore::inc(){
+      CCriticalRegion cr(mMutex);
+      mPosted = true;
+      pthread_cond_signal(&mCond);
+    }
+
+
+    void CPThreadSemaphore::waitIndefinitely(){
+      CCriticalRegion cr(mMutex);
+      while (!mPosted) {
+        pthread_cond_wait(&mCond, mMutex.getPosixMutex());
+      }
+      mPosted = false;
+    }
+
+
+    bool CPThreadSemaphore::timedWait(const TForteUInt64 paRelativeTimeout){
+      CCriticalRegion cr(mMutex);
+
+      if (mPosted) {
+        mPosted = false;
+        return true;
+      }
+
+      timespec timeoutSpec = {
+        static_cast<time_t>(paRelativeTimeout / 1000000000ULL),
+        static_cast<time_t>(paRelativeTimeout % 1000000000ULL)
+      };
+
+      timespec currentTime = { 0, 0 };
+      clock_gettime(CLOCK_MONOTONIC, &currentTime);
+
+      timespec expectedAbsoluteTimeoutTime = { 0, 0 };
+      timespecAdd(&currentTime, &timeoutSpec, &expectedAbsoluteTimeoutTime);
+
+      int rc = 0;
+      while (!mPosted && rc == 0) {
+        rc = pthread_cond_timedwait(&mCond, mMutex.getPosixMutex(), &expectedAbsoluteTimeoutTime);
+      }
+
+      if (rc != 0 && rc != ETIMEDOUT) {
+        DEVLOG_ERROR("Unexpected error during condition variable wait: %i\n", rc);
+      }
+
+      assert(!(rc == 0 && !mPosted)
+             && (bool)"should have been posted when waiting successfully");
+
+      bool success = (mPosted && rc == 0);
+      if (success) {
+        mPosted = false;
+      }
+
+      return success;
+    }
+
+
+    bool CPThreadSemaphore::tryNoWait(){
+      CCriticalRegion cr(mMutex);
+      bool success = mPosted;
+      mPosted = false;
+      return success;
+    }
+  } /* namespace arch */
+} /* namespace forte */
diff --git a/src/arch/kos/forte_sem.h b/src/arch/kos/forte_sem.h
new file mode 100644
index 00000000..f99ec985
--- /dev/null
+++ b/src/arch/kos/forte_sem.h
@@ -0,0 +1,88 @@
+/*******************************************************************************
+ * Copyright (c) 2016 fortiss GmbH, TU Vienna/ACIN,
+ *               2020 OFFIS e.V., Johannes Kepler University Linz
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl - initial API and implementation and/or initial documentation
+ *  Peter Gsellmann, Martin Melik-Merkumians - adds timed wait and try and no wait
+ *    and documentation
+ *  JÃ¶rg Walter - make timed wait work without busy-loop, switch to binary
+ *    semaphore
+ *  Alois Zoitl - changed from pthread mutex to CPThreadSyncObject
+ *******************************************************************************/
+
+#ifndef SRC_ARCH_POSIX_SEMAPHORE_H_
+#define SRC_ARCH_POSIX_SEMAPHORE_H_
+
+#include <pthread.h>
+#include "datatype.h"
+#include "forte_sync.h"
+
+namespace forte {
+  namespace arch {
+
+    /*!\brief binary semaphore for syncing operation in FORTE
+     *
+     * The semaphore is initialized with the value given.
+     */
+    class CPThreadSemaphore{
+      public:
+
+        explicit CPThreadSemaphore(bool paInitialValue = false);
+        ~CPThreadSemaphore();
+
+        /** @brief Unlocks (increments) the semaphore
+         *
+         */
+        void inc();
+
+        /** @brief Waits until the semaphore can be locked
+         *
+         */
+        void waitIndefinitely();
+
+        /** @brief Checks if the semaphore is locked, and waits the specified amount of time if it is locked
+         *
+         * @param paRelativeTimeout - The relative time span to wait in nanoseconds
+         * @return true - semaphore has become available before the timeout, false - semaphore was not available before timeout
+         */
+        bool timedWait(const TForteUInt64 paRelativeTimeout);
+
+        /** @brief Tries to immediately get the semaphore, if it is available
+         *
+         * @return true - semaphore was available, false - semaphore was not available
+         */
+        bool tryNoWait();
+
+      private:
+        /* TODO: in C++11, this class should be properly made non-copyable since
+         * mutexes cannot be copied after initialisation
+
+        CPThreadSemaphore(const CPThreadSemaphore &) = delete;
+        CPThreadSemaphore &operator=(const CPThreadSemaphore &) = delete;
+        */
+        CPThreadSemaphore(const CPThreadSemaphore &);
+        CPThreadSemaphore &operator=(const CPThreadSemaphore &);
+
+        /* Implementation is based on POSIX condition variables instead of POSIX
+         * semaphores, because POSIX semaphores cannot safely wait without busy
+         * looping. Derived from https://stackoverflow.com/a/57496953 */
+
+        CPThreadSyncObject mMutex;
+        pthread_cond_t mCond;
+
+        bool mPosted;
+
+    };
+
+    typedef CPThreadSemaphore CSemaphore;
+
+  } /* namespace arch */
+} /* namespace forte */
+
+#endif /* SRC_ARCH_POSIX_SEMAPHORE_H_ */
diff --git a/src/arch/kos/forte_sync.cpp b/src/arch/kos/forte_sync.cpp
new file mode 100644
index 00000000..0cdf4404
--- /dev/null
+++ b/src/arch/kos/forte_sync.cpp
@@ -0,0 +1,21 @@
+/*******************************************************************************
+ * Copyright (c) 2005 - 2010, 2017 ACIN, fortiss GmbH
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl, Rene Smodic - initial API and implementation and/or initial documentation
+ *******************************************************************************/
+#include "forte_sync.h"
+
+CPThreadSyncObject::CPThreadSyncObject(){
+  pthread_mutex_init(&mMutex, 0);
+}
+
+CPThreadSyncObject::~CPThreadSyncObject(){
+  pthread_mutex_destroy(&mMutex);
+  //TODO handle return value
+}
diff --git a/src/arch/kos/forte_sync.h b/src/arch/kos/forte_sync.h
new file mode 100644
index 00000000..6d5927e8
--- /dev/null
+++ b/src/arch/kos/forte_sync.h
@@ -0,0 +1,72 @@
+/*******************************************************************************
+ * Copyright (c) 2005, 2020 ACIN, OFFIS e.V.
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl - initial API and implementation and/or initial documentation
+ *  JÃ¶rg Walter - make objects non-copyable
+ *******************************************************************************/
+#ifndef _FORTE_SYNC_H_
+#define _FORTE_SYNC_H_
+
+#include <pthread.h>
+
+namespace forte {
+  namespace arch {
+    //forward declaration of CPThreadSemaphore so that we can use it in friend
+    class CPThreadSemaphore;
+  }
+}
+
+
+/*! \ingroup posix_hal
+ * \brief The sync object implementation for the posix thread interface.
+ *
+ * In the posix version a mutex is used for the sync object.
+ * 
+ */
+ 
+class CPThreadSyncObject{
+  public:
+    CPThreadSyncObject();
+    ~CPThreadSyncObject();
+
+    /*!\brief Lock the resource coming after the lock command
+     *
+     * This function blocks until it will get the lock for the coming critical section.
+     */
+    void lock(void){
+      pthread_mutex_lock(&mMutex);
+      //TODO handle return value
+    }
+
+    //!Free the resource coming after the lock command
+    void unlock(void){
+      pthread_mutex_unlock(&mMutex);
+      //TODO handle return value
+    }
+
+
+  private:
+    //! Accessor method to the mutex allowing platform specific code to use this sync object class.
+    pthread_mutex_t *getPosixMutex(){
+      return &mMutex;
+    }
+
+    // prevent copies, since pthread_mutex_t may not be copied
+    CPThreadSyncObject(const CPThreadSyncObject &); /* = delete; */
+    CPThreadSyncObject &operator=(const CPThreadSyncObject &); /* = delete; */
+
+    //! The posix thread mutex handle of the operating system.
+    pthread_mutex_t mMutex;
+
+    friend class forte::arch::CPThreadSemaphore;
+};
+
+typedef CPThreadSyncObject CSyncObject; //allows that doxygen can generate better documenation
+
+#endif /*FORTE_SYNC_H_*/
diff --git a/src/arch/kos/forte_thread.cpp b/src/arch/kos/forte_thread.cpp
new file mode 100644
index 00000000..71521664
--- /dev/null
+++ b/src/arch/kos/forte_thread.cpp
@@ -0,0 +1,90 @@
+/*******************************************************************************
+ * Copyright (c) 2005 - 2017 ACIN, fortiss GmbH, Red Hat Inc
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl, Rene Smodic, Martin Melik Merkiumians - initial API and implementation and/or initial documentation
+ *  Alois Zoitl - extracted common functions to new base class CThreadBase
+ *  Jens Reimann - fix waiting for thread initialization
+ *******************************************************************************/
+#include <fortealloc.h>
+#include "forte_thread.h"
+#include "../devlog.h"
+#include <errno.h>
+#include <cstring>
+#include <signal.h>
+#include <sys/wait.h>
+#include <unistd.h>
+#include <criticalregion.h>
+
+forte::arch::CThreadBase<pthread_t>::TThreadHandleType CPosixThread::createThread(long paStackSize){
+  TThreadHandleType retVal = 0;
+
+  if(paStackSize){
+    pthread_attr_t stAttr;
+
+    if(pthread_attr_init(&stAttr)){
+      DEVLOG_ERROR("Error could not get the default thread attributes! %s\n", strerror(errno));
+      return 0;
+    }
+#ifdef __CYGWIN__
+    if (pthread_attr_setstacksize (&stAttr, paStackSize)){
+      DEVLOG_ERROR("Error could not set the stacksize for the thread! %s\n", strerror(errno));
+      return 0;
+    }
+#else //__CYGWIN__
+    if(pthread_attr_setstack(&stAttr, mStack, paStackSize)){
+      DEVLOG_ERROR("Error could not set the stacksize for the thread! %s\n", strerror(errno));
+      return 0;
+    }
+#endif //__CYGWIN__
+    if(pthread_create(&retVal, &stAttr, threadFunction, this)){
+      DEVLOG_ERROR("Error could not create the thread! %s\n", strerror(errno));
+      return 0;
+    }
+    if(pthread_attr_destroy(&stAttr)){
+      DEVLOG_ERROR("Error could not free the thread attributes! %s\n", strerror(errno));
+      return 0;
+    }
+  }
+  else{
+    if(pthread_create(&retVal, NULL, threadFunction, this)){
+      DEVLOG_ERROR("Error could not create the thread! %s\n", strerror(errno));
+      return 0;
+    }
+  }
+  // Detach because we don't care about the thread anymore/don't need to join. To cleanup either call pthread_detach or pthread_join
+  pthread_detach(retVal);
+
+  return retVal;
+}
+
+void * CPosixThread::threadFunction(void *paArguments){
+  // Get pointer to CThread object out of void pointer
+  CThreadBase<pthread_t>::runThread(static_cast<CPosixThread *>(paArguments));
+  return 0;
+}
+
+CPosixThread::CPosixThread(long paStackSize) : CThreadBase<pthread_t>(paStackSize){
+  if(0 != paStackSize){
+    mStack = new char[paStackSize];
+  }
+}
+
+CPosixThread::~CPosixThread(){
+}
+
+void CPosixThread::setDeadline(const CIEC_TIME &paVal){
+  mDeadline = paVal;
+  //under the posix pthread implemention currently it makes no sense to set any priority.
+  //It will not be considered.
+}
+
+void CPosixThread::sleepThread(unsigned int paMilliSeconds){
+  struct timespec stReq = { static_cast<time_t>(paMilliSeconds / 1000), static_cast<long>(1000000 * (paMilliSeconds % 1000)) };
+  nanosleep(&stReq, NULL);
+}
diff --git a/src/arch/kos/forte_thread.h b/src/arch/kos/forte_thread.h
new file mode 100644
index 00000000..9c042822
--- /dev/null
+++ b/src/arch/kos/forte_thread.h
@@ -0,0 +1,76 @@
+/*******************************************************************************
+ * Copyright (c) 2006 - 2017 ACIN, fortiss GmbH
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl, Rene Smodic, Ingo Hegny, Martin Melik Merkiumians - initial API and implementation and/or initial documentation
+ *  Alois Zoitl - extracted common functions to new base class CThreadBase
+ *******************************************************************************/
+#ifndef _FORTE_THREAD_H_
+#define _FORTE_THREAD_H_
+
+#include "../threadbase.h"
+#include <forte_sync.h>
+#include <pthread.h>
+
+/**  \ingroup FORTE-HAL 
+ * \defgroup posix_hal PC FORTE Hardware Abstraction Layer
+ *
+ * \brief The FORTE-HAL implementation for normal PCs
+ *
+ * It will mainly work under linux or linux similar environments like cygwin.
+ */
+
+/*! \ingroup posix_hal
+ * \brief The thread implementation for the posix thread interface. 
+ */
+class CPosixThread : public forte::arch::CThreadBase<pthread_t> {
+  public:
+    /*! \brief Constructor of the Thread class
+     *
+     *  Does all the necessary steps in order to get the thread running with the start()-method
+     *  @param paStackSize the Size of the stack the thread is allowed to use. 0 means use system default stack size.
+     *      If you like to set this value it is best to use the form: PTHREAD_STACK_MIN + additional bytes you need.
+     */
+    explicit CPosixThread(long paStackSize = 0);
+
+    /*! \brief Stops and destroys thread.
+     *
+     *  Will stop the execution if running and destroy the thread including all system specific data.
+     */
+    virtual ~CPosixThread();
+
+    //!Set the deadline of the thread.
+    void setDeadline(const CIEC_TIME &paVal);
+
+    /*! \brief Sleep the calling thread
+     *
+     * @param paMilliSeconds The milliseconds for the thread to sleep
+     */
+
+    static void sleepThread(unsigned int paMilliSeconds);
+
+  private:
+    virtual TThreadHandleType createThread(long paStackSize);
+
+    /*!\brief Function that is given to the system thread support that should be called for the thread.
+     *
+     * this function will call the run method of the thread instance.
+     */
+    static void * threadFunction(void *paArguments);
+
+    //we don't want that threads can be copied or assigned therefore the copy constructor and assignment operator are declared private
+    //but not implemented
+    CPosixThread(const CPosixThread&);
+    CPosixThread& operator = (const CPosixThread &);
+};
+
+
+typedef CPosixThread CThread;  //allows that doxygen can generate better documentation
+
+#endif /*FORTE_THREAD_H_*/
+
diff --git a/src/arch/kos/fortealloc.h b/src/arch/kos/fortealloc.h
new file mode 100644
index 00000000..c1d36c63
--- /dev/null
+++ b/src/arch/kos/fortealloc.h
@@ -0,0 +1,18 @@
+/*******************************************************************************
+ * Copyright (c) 2010 ACIN
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl - initial API and implementation and/or initial documentation
+ *******************************************************************************/
+#ifndef FORTEALLOC_H_
+#define FORTEALLOC_H_
+
+//on posix environments we are typically happy with the generic alloc implementation based on malloc and free
+#include "../genfortealloc.h"
+
+#endif /* FORTEALLOC_H_ */
diff --git a/src/arch/kos/main.cpp b/src/arch/kos/main.cpp
new file mode 100644
index 00000000..9afb16e6
--- /dev/null
+++ b/src/arch/kos/main.cpp
@@ -0,0 +1,117 @@
+/*******************************************************************************
+ * Copyright (c) 2006 - 2018 ACIN, Profactor GmbH, AIT, fortiss GmbH
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl, Gerhard Ebenhofer, Thomas Strasser, Rene Smodic,
+ *  Martin Melik Merkumians, Ingo Hegny, Filip Andren - initial API and implementation and/or initial documentation
+ *  Tarik Terzimehic - make OPC UA server port setable from the command line
+ *******************************************************************************/
+#include <fortenew.h>
+#include <stdio.h>
+#include <signal.h>
+#include "../../stdfblib/ita/RMT_DEV.h"
+
+#include "../utils/mainparam_utils.h"
+
+#ifdef FORTE_ROS
+#include <ros/ros.h>
+#endif //FORTE_ROS
+
+#ifdef CONFIG_POWERLINK_USERSTACK
+#include <EplWrapper.h>
+#endif
+
+/*!\brief Check if the correct endianess has been configured.
+ *
+ * If the right endianess is not set this function will end FORTE.
+ */
+void checkEndianess();
+
+//this keeps away a lot of rtti and exception handling stuff
+extern "C" void __cxa_pure_virtual(void){
+  //TODO maybe add some reporting here
+  //Although we should never get here
+  //if we are here something very very bad has happened e.g., stack overflow or other memory corruption
+
+}
+
+RMT_DEV *poDev = 0;
+
+void endForte(int pa_nSig){
+  (void) pa_nSig;
+  if(0 != poDev){
+    poDev->changeFBExecutionState(cg_nMGM_CMD_Kill);
+  }
+}
+
+/*!\brief Creates the Device-Object
+ * \param pa_acMGRID A string containing IP and Port like [IP]:[Port]
+ */
+void createDev(const char *pa_acMGRID){
+
+  signal(SIGINT, endForte);
+  signal(SIGTERM, endForte);
+  signal(SIGHUP, endForte);
+
+#ifdef CONFIG_POWERLINK_USERSTACK
+  CEplStackWrapper::eplMainInit();
+#endif
+
+  poDev = new RMT_DEV;
+
+  poDev->setMGR_ID(pa_acMGRID);
+  poDev->startDevice();
+  DEVLOG_INFO("FORTE is up and running\n");
+  poDev->MGR.joinResourceThread();
+  DEVLOG_INFO("FORTE finished\n");
+  delete poDev;
+}
+
+int main(int argc, char *arg[]){
+
+  checkEndianess();
+
+#ifdef FORTE_ROS
+  if(argc <= 1){ //! Default Value (localhost:61499)
+    std::string rosdistro = "indigo";
+    if (rosdistro == (std::string)std::getenv("ROS_DISTRO")){
+      DEVLOG_INFO("path to forte.exe: %s \n", arg[0]);
+      ros::init(argc, arg, "ros_Functionblocks_in_FORTE");
+    }
+  }
+#endif //FORTE_ROS
+
+  const char *pIpPort = parseCommandLineArguments(argc, arg);
+  if((0 != strlen(pIpPort)) && (NULL != strchr(pIpPort, ':'))){
+    createDev(pIpPort);
+  }
+  else{ //! Lists the help for FORTE
+    listHelp();
+  }
+
+  return 0;
+}
+
+void checkEndianess(){
+  int i = 1;
+  char *p = (char *) &i;
+  if(p[0] == 1){
+    //we are on a little endian platform
+#ifdef FORTE_BIG_ENDIAN
+    DEVLOG_ERROR("Wrong endianess configured! You are on a little endian platform and have configured big endian!\n");
+    exit(-1);
+#endif
+  }
+  else{
+    //we are on a big endian platform
+#ifdef FORTE_LITTLE_ENDIAN
+    DEVLOG_ERROR("Wrong endianess configured! You are on a big endian platform and have configured little endian!\n");
+    exit(-1);
+#endif
+  }
+}
diff --git a/src/arch/kos/pctimeha.cpp b/src/arch/kos/pctimeha.cpp
new file mode 100644
index 00000000..bf35ffca
--- /dev/null
+++ b/src/arch/kos/pctimeha.cpp
@@ -0,0 +1,79 @@
+/*******************************************************************************
+ * Copyright (c) 2005 - 2018 ACIN, fortiss GmbH
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl - initial API and implementation and/or initial documentation
+ *  Martin Melik-Merkumians - updates timer handler to use monotonic clock
+ *******************************************************************************/
+#include <fortenew.h>
+#include "pctimeha.h"
+#include "../../core/devexec.h"
+#include <time.h>
+#include <sys/time.h>
+#include "../utils/timespec_utils.h"
+
+CTimerHandler* CTimerHandler::createTimerHandler(CDeviceExecution& pa_poDeviceExecution){
+  return new CPCTimerHandler(pa_poDeviceExecution);
+}
+
+CPCTimerHandler::CPCTimerHandler(CDeviceExecution& pa_poDeviceExecution) : CTimerHandler(pa_poDeviceExecution)  {
+}
+
+CPCTimerHandler::~CPCTimerHandler(){
+  disableHandler();
+}
+
+void CPCTimerHandler::run(){
+  struct timespec stReq;
+  stReq.tv_sec = 0;
+  stReq.tv_nsec = (1000000 / getTicksPerSecond()) * 1000;
+  
+  struct timespec stOldTime;
+  struct timespec stNewTime;
+  struct timespec stReqTime;
+  // Timer interval is 1ms
+  stReqTime.tv_sec = 0;
+  stReqTime.tv_nsec = (1000000 / getTicksPerSecond()) * 1000;
+  struct timespec stDiffTime;
+  struct timespec stRemainingTime = { 0, 0 };
+
+  clock_gettime(CLOCK_MONOTONIC, &stOldTime);
+  while(isAlive()){
+
+    nanosleep(&stReq, NULL);
+
+    clock_gettime(CLOCK_MONOTONIC, &stNewTime);
+
+    timespecSub(&stNewTime, &stOldTime, &stDiffTime);
+
+    timespecAdd(&stRemainingTime, &stDiffTime, &stRemainingTime);
+
+    while(!timespecLessThan(&stRemainingTime, &stReqTime)){
+      nextTick();
+      timespecSub(&stRemainingTime, &stReqTime, &stRemainingTime);
+    }
+    stOldTime = stNewTime;  // in c++ this should work fine
+  } 
+}
+
+void CPCTimerHandler::enableHandler(void){
+  start();
+}
+
+void CPCTimerHandler::disableHandler(void){
+  end(); 
+}
+
+void CPCTimerHandler::setPriority(int ){
+  //TODO think on hwo to handle this.
+}
+
+int CPCTimerHandler::getPriority(void) const {
+  //TODO think on hwo to handle this.
+  return 1;
+}
diff --git a/src/arch/kos/pctimeha.h b/src/arch/kos/pctimeha.h
new file mode 100644
index 00000000..9ca34259
--- /dev/null
+++ b/src/arch/kos/pctimeha.h
@@ -0,0 +1,52 @@
+/*******************************************************************************
+ * Copyright (c) 2005 - 2011 ACIN
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl - initial API and implementation and/or initial documentation
+ *******************************************************************************/
+#ifndef _PCTIMEHA_H_
+#define _PCTIMEHA_H_
+
+#include <forte_thread.h>
+#include "../timerha.h"
+
+/*! \ingroup posix_hal
+ *\ingroup EXTEVHAND
+ *\brief the timer handler for the pc architecture.
+ */
+class CPCTimerHandler : public CTimerHandler, private CThread {
+  public:
+    virtual ~CPCTimerHandler();
+
+    virtual void run();
+
+    /*!\brief Enables this event source
+     *
+     */
+    virtual void enableHandler(void);
+    /*!\brief Disable this event source
+     */
+    virtual void disableHandler(void);
+    /*!\brief Sets the priority of the event source
+     *
+     * \param pa_nPriority new priority of the event source
+     */
+    virtual void setPriority(int pa_nPriority);
+    /*!\brief Get the current priority of the event source
+     *
+     * \return current priority
+     */
+    virtual int getPriority(void) const;
+  private:
+    explicit CPCTimerHandler(CDeviceExecution& pa_poDeviceExecution);
+
+    friend class CTimerHandler;
+
+};
+
+#endif /*PCTIMEHA_H_*/
diff --git a/src/arch/kos/posixsercommlayer.cpp b/src/arch/kos/posixsercommlayer.cpp
new file mode 100644
index 00000000..621d73a7
--- /dev/null
+++ b/src/arch/kos/posixsercommlayer.cpp
@@ -0,0 +1,195 @@
+/*******************************************************************************
+ * Copyright (c) 2012, 2017 ACIN, fortiss GmbH
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl - initial API and implementation and/or initial documentation
+ *******************************************************************************/
+#include "posixsercommlayer.h"
+#include "../devlog.h"
+#include "../../core/cominfra/commfb.h"
+#include <unistd.h>
+#include <errno.h>
+#include <string.h>
+#include <sys/types.h>
+#include <sys/stat.h>
+#include <fcntl.h>
+#include <sockhand.h>
+#include <criticalregion.h>
+
+CPosixSerCommLayer::CPosixSerCommLayer(forte::com_infra::CComLayer* paUpperLayer, forte::com_infra::CBaseCommFB* paFB) :
+   CSerialComLayerBase(paUpperLayer, paFB){
+}
+
+CPosixSerCommLayer::~CPosixSerCommLayer(){
+  closeConnection();
+}
+
+forte::com_infra::EComResponse CPosixSerCommLayer::sendData(void *paData, unsigned int paSize){
+  if(CFDSelectHandler::scmInvalidFileDescriptor != getSerialHandler()){
+    ssize_t nToSend = paSize;
+    while(0 < nToSend){
+      ssize_t nSentBytes = write(getSerialHandler(), paData, nToSend);
+      if(nSentBytes <= 0){
+        DEVLOG_ERROR("CSerCommLayer: Send failed: %s\n", strerror(errno));
+        return forte::com_infra::e_ProcessDataSendFailed;
+      }
+      nToSend -= nSentBytes;
+      paData = static_cast<char*>(paData) + nSentBytes;
+    }
+  }
+
+  return forte::com_infra::e_ProcessDataOk;
+}
+
+forte::com_infra::EComResponse CPosixSerCommLayer::recvData(const void *, unsigned int){
+  CCriticalRegion lock(mRecvLock);
+  ssize_t nReadCount = read(getSerialHandler(), &mRecvBuffer[mBufFillSize], cg_unIPLayerRecvBufferSize - mBufFillSize);
+
+  switch (nReadCount){
+    case 0:
+      DEVLOG_INFO("Connection closed by peer\n");
+      mInterruptResp = forte::com_infra::e_InitTerminated;
+      closeConnection();
+      break;
+    case -1:
+      DEVLOG_ERROR("CSerCommLayer: read failed: %s\n", strerror(errno));
+      mInterruptResp = forte::com_infra::e_ProcessDataRecvFaild;
+      break;
+    default:
+      //we successfully received data
+      mBufFillSize += nReadCount;
+      mInterruptResp = forte::com_infra::e_ProcessDataOk;
+      break;
+  }
+
+  m_poFb->interruptCommFB(this);
+  return mInterruptResp;
+}
+
+forte::com_infra::EComResponse CPosixSerCommLayer::openSerialConnection(const SSerialParameters& paSerialParameters, CSerialComLayerBase<FORTE_SOCKET_TYPE, FORTE_INVALID_SOCKET>::TSerialHandleType* paHandleResult){
+  forte::com_infra::EComResponse eRetVal = forte::com_infra::e_ProcessDataNoSocket;
+
+  //as first shot take the serial interface device as param (e.g., /dev/ttyS0 )
+  CFDSelectHandler::TFileDescriptor fileDescriptor = open(paSerialParameters.interfaceName.getValue(), O_RDWR | O_NOCTTY);
+
+  if(CFDSelectHandler::scmInvalidFileDescriptor != fileDescriptor){
+    tcgetattr(fileDescriptor, &mOldTIO);
+    struct termios stNewTIO;
+    memset(&stNewTIO, 0, sizeof(stNewTIO));
+
+    stNewTIO.c_line = mOldTIO.c_line;
+
+    switch (paSerialParameters.baudRate) {
+      case e50: stNewTIO.c_cflag |= B50;  break;
+      case e75: stNewTIO.c_cflag |= B75;  break;
+      case e110: stNewTIO.c_cflag |= B110;  break;
+      case e134C5: stNewTIO.c_cflag |= B134;  break;
+      case e150: stNewTIO.c_cflag |= B150;  break;
+      case e200: stNewTIO.c_cflag |= B200;  break;
+      case e300: stNewTIO.c_cflag |= B300; break;
+      case e600: stNewTIO.c_cflag |= B600; break;
+      case e1200: stNewTIO.c_cflag |= B1200; break;
+      case e1800: stNewTIO.c_cflag |= B1800; break;
+      case e2400: stNewTIO.c_cflag |= B2400; break;
+      case e4800: stNewTIO.c_cflag |= B4800; break;
+      case e9600: stNewTIO.c_cflag |= B9600; break;
+      case e19200: stNewTIO.c_cflag |= B19200; break;
+      case e38400: stNewTIO.c_cflag |= B38400; break;
+      case e57600: stNewTIO.c_cflag |= B57600; break;
+      case e115200: stNewTIO.c_cflag |= B115200; break;
+      case e1000000: stNewTIO.c_cflag |= B1000000; break;
+      default: return forte::com_infra::e_InitInvalidId; break;
+    }
+
+    cfsetispeed(&stNewTIO, cfgetispeed(&mOldTIO));
+    cfsetospeed(&stNewTIO, cfgetospeed(&mOldTIO));
+
+    switch (paSerialParameters.byteSize) {
+      case e5: stNewTIO.c_cflag |= CS5;  break;
+      case e6: stNewTIO.c_cflag |= CS6;  break;
+      case e7: stNewTIO.c_cflag |= CS7;  break;
+      case e8: stNewTIO.c_cflag |= CS8;  break;
+      default: return forte::com_infra::e_InitInvalidId; break;
+    }
+
+    switch(paSerialParameters.stopBits){
+       case eOneBit: stNewTIO.c_cflag &= ~CSTOPB;  break;
+       case eTwoBits: stNewTIO.c_cflag |= CSTOPB;  break;
+       default: return forte::com_infra::e_InitInvalidId; break;
+     }
+
+    switch(paSerialParameters.parity){
+      case eNoParity:
+        stNewTIO.c_cflag &= ~(PARENB | PARODD | CMSPAR);
+        break;
+      case eODD: stNewTIO.c_cflag |= PARENB | PARODD;  break;
+      case eEven:
+        stNewTIO.c_cflag |= PARENB;
+        stNewTIO.c_cflag &= ~PARODD;
+        break;
+      default: return forte::com_infra::e_InitInvalidId; break;
+    }
+
+    stNewTIO.c_cflag &= ~CRTSCTS;  // no hardware flow control
+
+    stNewTIO.c_cflag |= (CLOCAL | CREAD); /* Local line - do not change "owner" of port |  Enable receiver*/
+
+    stNewTIO.c_iflag = mOldTIO.c_iflag;
+    stNewTIO.c_iflag |= IGNPAR; /* Map CR to NL | IGNPAR (was here before)  Ignore parity error. TODO: Should we delete this? It was on the old code*/ ;
+    stNewTIO.c_iflag &= ~(IXON | IXOFF | IXANY); // Turn off s/w flow ctrl
+    stNewTIO.c_iflag &= ~(IGNBRK | BRKINT | PARMRK | ISTRIP | INLCR | IGNCR | ICRNL | INPCK | IUCLC); // Disable any special handling of received bytes
+
+    stNewTIO.c_oflag = mOldTIO.c_oflag;
+    stNewTIO.c_oflag &= ~(OPOST | ONLCR | OCRNL);
+
+    stNewTIO.c_lflag = mOldTIO.c_lflag;
+    stNewTIO.c_lflag &= ~(ICANON| ECHO | ECHOE| ECHONL | ECHOK | ISIG | IEXTEN | CRTSCTS);
+
+    stNewTIO.c_cc[VINTR] = _POSIX_VDISABLE; /* Ctrl-c */
+    stNewTIO.c_cc[VQUIT] = _POSIX_VDISABLE; /* Ctrl-\ */
+    stNewTIO.c_cc[VERASE] = _POSIX_VDISABLE; /* del */
+    stNewTIO.c_cc[VKILL] = _POSIX_VDISABLE; /* @ */
+    stNewTIO.c_cc[VEOF] = _POSIX_VDISABLE; /* Ctrl-d */
+    stNewTIO.c_cc[VTIME] = 10; /* inter-character timer unused */
+    stNewTIO.c_cc[VMIN] = 1; /* blocking read until 1 character arrives */
+    stNewTIO.c_cc[VSWTC] = _POSIX_VDISABLE; /* '\0' */
+    stNewTIO.c_cc[VSTART] = _POSIX_VDISABLE; /* Ctrl-q */
+    stNewTIO.c_cc[VSTOP] = _POSIX_VDISABLE; /* Ctrl-s */
+    stNewTIO.c_cc[VSUSP] = _POSIX_VDISABLE; /* Ctrl-z */
+    stNewTIO.c_cc[VEOL] = _POSIX_VDISABLE; /* '\0' */
+    stNewTIO.c_cc[VREPRINT] = _POSIX_VDISABLE; /* Ctrl-r */
+    stNewTIO.c_cc[VDISCARD] = _POSIX_VDISABLE; /* Ctrl-u */
+    stNewTIO.c_cc[VWERASE] = _POSIX_VDISABLE; /* Ctrl-w */
+    stNewTIO.c_cc[VLNEXT] = _POSIX_VDISABLE; /* Ctrl-v */
+    stNewTIO.c_cc[VEOL2] = _POSIX_VDISABLE; /* '\0' */
+
+    tcflush(fileDescriptor, TCIFLUSH);
+    tcsetattr(fileDescriptor, TCSANOW, &stNewTIO);
+
+    getExtEvHandler<CFDSelectHandler>().addComCallback(fileDescriptor, this);
+    *paHandleResult = fileDescriptor;
+    eRetVal = forte::com_infra::e_InitOk;
+
+  }
+  else{
+    eRetVal = forte::com_infra::e_ProcessDataInvalidObject;
+    DEVLOG_ERROR("CSerCommLayer: open failed: %s\n", strerror(errno));
+  }
+
+  return eRetVal;
+}
+
+void CPosixSerCommLayer::closeConnection(){
+  CFDSelectHandler::TFileDescriptor fileDescriptor = getSerialHandler();
+  if(CFDSelectHandler::scmInvalidFileDescriptor != fileDescriptor){
+    getExtEvHandler<CFDSelectHandler>().removeComCallback(fileDescriptor);
+    tcsetattr(fileDescriptor, TCSANOW, &mOldTIO);
+    close(fileDescriptor);
+  }
+}
+
diff --git a/src/arch/kos/posixsercommlayer.h b/src/arch/kos/posixsercommlayer.h
new file mode 100644
index 00000000..9788a8f9
--- /dev/null
+++ b/src/arch/kos/posixsercommlayer.h
@@ -0,0 +1,35 @@
+/*******************************************************************************
+ * Copyright (c) 2012, 2017 ACIN, fortiss GmbH
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl - initial API and implementation and/or initial documentation
+ *******************************************************************************/
+#ifndef _SERCOMMLAYER_H_
+#define _SERCOMMLAYER_H_
+
+#include <termios.h>
+#include "../../core/cominfra/serialcomlayerbase.h"
+#include "../gensockhand.h"
+
+class CPosixSerCommLayer : public CSerialComLayerBase<FORTE_SOCKET_TYPE, FORTE_INVALID_SOCKET>{
+  public:
+    CPosixSerCommLayer(forte::com_infra::CComLayer* paUpperLayer, forte::com_infra::CBaseCommFB * paFB);
+    virtual ~CPosixSerCommLayer();
+
+    virtual forte::com_infra::EComResponse sendData(void *paData, unsigned int paSize);
+    virtual forte::com_infra::EComResponse recvData(const void *paData, unsigned int paSize);
+
+  protected:
+  private:
+    virtual forte::com_infra::EComResponse openSerialConnection(const SSerialParameters& paSerialParameters, CSerialComLayerBase<FORTE_SOCKET_TYPE, FORTE_INVALID_SOCKET>::TSerialHandleType* paHandleResult);
+    virtual void closeConnection();
+
+    struct termios mOldTIO;    //!< buffer for the existing sercom settings
+};
+
+#endif /* CSERCOMMLAYER_H_ */
diff --git a/src/arch/kos/sockhand.h b/src/arch/kos/sockhand.h
new file mode 100644
index 00000000..13fb2bb0
--- /dev/null
+++ b/src/arch/kos/sockhand.h
@@ -0,0 +1,32 @@
+/*******************************************************************************
+ * Copyright (c) 2010 - 2015 ACIN, fortiss GmbH
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
+ * SPDX-License-Identifier: EPL-2.0
+ *
+ * Contributors:
+ *  Alois Zoitl - initial API and implementation and/or initial documentation
+ *******************************************************************************/
+#ifndef SOCKHAND_H_
+#define SOCKHAND_H_
+
+#include <unistd.h>
+#include <sys/types.h>
+#include <sys/select.h>
+#include <sys/socket.h>
+#include <sys/time.h>
+#include <netinet/in.h>
+#include <arpa/inet.h>
+#include <errno.h>
+#include <string.h>
+
+//these include needs to be last
+#include "../gensockhand.h"
+#include "../fdselecthand.h"
+#include "../bsdsocketinterf.h"
+
+typedef CGenericIPComSocketHandler<CFDSelectHandler, CBSDSocketInterface> CIPComSocketHandler;
+
+#endif /* SOCKHAND_H_ */
-- 
2.17.1


From bda9476d1d96e9ce941e065d12d30a1ba57e3493 Mon Sep 17 00:00:00 2001
From: Alex Maksimov <almaximort@yandex.ru>
Date: Sun, 26 Jun 2022 13:54:13 +0300
Subject: [PATCH 2/3] Can compile, but can't run. Should be cleaned

---
 CMakeLists.txt                         | 10 ++++-
 buildsupport/generate_init.cmake       | 27 ++++++++++++-
 buildsupport/generate_stringlist.cmake | 29 ++++++++++++--
 src/CMakeLists.txt                     | 53 ++++++++++++++++++++++++--
 src/arch/kos/CMakeLists.txt            | 19 +++++++++
 src/arch/kos/main.cpp                  | 11 ++++--
 src/arch/posix/CMakeLists.txt          |  2 +-
 7 files changed, 136 insertions(+), 15 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 66c56b65..0a6f653a 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -17,7 +17,15 @@
 CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
 
 PROJECT(FORTE)
-
+
+include(CMakePrintHelpers)
+cmake_print_variables(FORTE_ARCHITECTURE)
+
+#include (platform/nk)
+#nk_build_edl_files (forte_edl_files NK_MODULE "forte" EDL "${CMAKE_SOURCE_DIR}/resources/edl/Forte.edl")
+
+
+
 set(FORTE_USE_STD_11 OFF CACHE BOOL "Enable c++11 for the project")
 mark_as_advanced(FORTE_USE_STD_11)
 
diff --git a/buildsupport/generate_init.cmake b/buildsupport/generate_init.cmake
index 1bbefd75..deecf94e 100644
--- a/buildsupport/generate_init.cmake
+++ b/buildsupport/generate_init.cmake
@@ -10,10 +10,25 @@
 #     Gerhard Ebenhofer and Ingo Hegny - initial API and implementation and/or initial documentation
 # *******************************************************************************/
 
-MESSAGE("Generate Initfunction")
+MESSAGE("Generate Initfunction ")
 MESSAGE("Source Dir: ${FORTE_SOURCE_DIR}")
 MESSAGE("Binary Dir: ${FORTE_BINARY_DIR}")
-FILE(STRINGS ${CMAKE_BINARY_DIR}/../file_list.txt FILE_NAMES)
+
+
+
+#if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+#FILE(STRINGS ${CMAKE_BINARY_DIR}/file_list.txt FILE_NAMES)
+
+
+
+
+#elseif()
+#FILE(STRINGS ${CMAKE_BINARY_DIR}/../file_list.txt FILE_NAMES)
+
+#endif()
+
+
+
 
 #######################################################################################
 # Create Forte-Executeable with all Functionblocks
@@ -119,6 +134,14 @@ CONFIGURE_FILE(${FORTE_SOURCE_DIR}/src/forteinit.h.in ${FORTE_BINARY_DIR}/fortei
 # only copy files if different
 execute_process( COMMAND ${CMAKE_COMMAND} -E compare_files ${FORTE_BINARY_DIR}/forteinit_new.cpp ${FORTE_BINARY_DIR}/forteinit.cpp RESULT_VARIABLE test_not_successful_cpp OUTPUT_QUIET ERROR_QUIET )
 execute_process( COMMAND ${CMAKE_COMMAND} -E compare_files ${FORTE_BINARY_DIR}/forteinit_new.h ${FORTE_BINARY_DIR}/forteinit.h RESULT_VARIABLE test_not_successful_h OUTPUT_QUIET ERROR_QUIET )
+
+
+execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${FORTE_BINARY_DIR}/forteinit_new.cpp ${FORTE_BINARY_DIR}/forte/forteinit.cpp)
+execute_process( COMMAND ${CMAKE_COMMAND} -E copy ${FORTE_BINARY_DIR}/forteinit_new.h ${FORTE_BINARY_DIR}/forte/forteinit.h)
+
+
+
+
 
 IF(test_not_successful_cpp)
   file(REMOVE ${FORTE_BINARY_DIR}/forteinit.cpp)
diff --git a/buildsupport/generate_stringlist.cmake b/buildsupport/generate_stringlist.cmake
index 22d1006d..ea66c70e 100644
--- a/buildsupport/generate_stringlist.cmake
+++ b/buildsupport/generate_stringlist.cmake
@@ -11,11 +11,13 @@
 # *******************************************************************************/
 
 MESSAGE(Generate Stringlist)
-MESSAGE("Source Dir: ${FORTE_SOURCE_DIR}")
-MESSAGE("Binary Dir: ${FORTE_BINARY_DIR}")
+MESSAGE("Source Dir (for Stringlist): ${FORTE_SOURCE_DIR}")
+MESSAGE("Binary Dir: (for Stringlist) ${FORTE_BINARY_DIR}")
 FILE(STRINGS ${FORTE_BINARY_DIR}/file_list.txt FBLIB_STRUCT)
-
-
+
+
+
+
 if(EXISTS ${FORTE_BINARY_DIR}/file_test_list.txt)
   Message("adding testlist")
   FILE(STRINGS ${FORTE_BINARY_DIR}/file_test_list.txt FBLIB_TEST_STRUCT)
@@ -121,7 +123,26 @@ CONFIGURE_FILE(${FORTE_SOURCE_DIR}/stringlist.h.in ${FORTE_BINARY_DIR}/stringlis
 CONFIGURE_FILE(${FORTE_SOURCE_DIR}/stringlist.cpp.in ${FORTE_BINARY_DIR}/stringlist_new.cpp)
 
 # only copy files if different
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+
+message("DOESN'T WORK stringlist.h")
+
+execute_process( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${FORTE_BINARY_DIR}/stringlist_new.h ${FORTE_BINARY_DIR}/forte/stringlist.h OUTPUT_QUIET ERROR_QUIET )
+execute_process( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${FORTE_BINARY_DIR}/stringlist_new.cpp ${FORTE_BINARY_DIR}/forte/stringlist.cpp OUTPUT_QUIET ERROR_QUIET )
+
+else()
+
 execute_process( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${FORTE_BINARY_DIR}/stringlist_new.h ${FORTE_BINARY_DIR}/stringlist.h OUTPUT_QUIET ERROR_QUIET )
 execute_process( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${FORTE_BINARY_DIR}/stringlist_new.cpp ${FORTE_BINARY_DIR}/stringlist.cpp OUTPUT_QUIET ERROR_QUIET )
+
+
+execute_process( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${FORTE_BINARY_DIR}/stringlist.h ${FORTE_BINARY_DIR}/forte/stringlist.h)
+execute_process( COMMAND ${CMAKE_COMMAND} -E copy_if_different ${FORTE_BINARY_DIR}/stringlist.cpp ${FORTE_BINARY_DIR}/forte/stringlist.cpp OUTPUT_QUIET ERROR_QUIET )
+
+
+
+
+endif()
+
 file(REMOVE ${FORTE_BINARY_DIR}/stringlist_new.h)
 file(REMOVE ${FORTE_BINARY_DIR}/stringlist_new.cpp)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 66c5a96c..6ca49b95 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -12,6 +12,11 @@
 # *     - initial API and implementation and/or initial documentation
 # *******************************************************************************/
 
+
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+include (platform/nk)
+endif()
+
 set(FORTE_EXTERNAL_MODULES_DIRECTORY "" CACHE PATH "Path to a directory with FORTE modules located outside of the FORTE source code")
 SET(FORTE_MODULE_LIST modules;com;external)
 forte_create_modules_file("${FORTE_MODULE_LIST}")
@@ -231,8 +236,14 @@ SET(WRITE_FILE "")
 FOREACH(FILE ${SOURCE_FILES})
   SET(WRITE_FILE "${WRITE_FILE}${FILE}\n")
 ENDFOREACH(FILE)
-FILE(WRITE ${CMAKE_BINARY_DIR}/file_list.txt "${WRITE_FILE}")
-
+FILE(WRITE ${CMAKE_BINARY_DIR}/file_list.txt "${WRITE_FILE}")
+
+
+include(CMakePrintHelpers)
+message("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRr")
+cmake_print_variables(CMAKE_BINARY_DIR)
+
+
 ######################################################################################
 # Architecutre to build forte on
 ######################################################################################
@@ -263,7 +274,29 @@ add_library(FORTE_LITE OBJECT ${SOURCE_FILES}) #no executables.
 if(FORTE_BUILD_EXECUTABLE)
   ADD_EXECUTABLE (forte $<TARGET_OBJECTS:FORTE_LITE> ${SOURCE_EXECUTABLE_CPP} ${FORTE_EXECUTABLE_H})
   set_target_properties(forte PROPERTIES LINK_FLAGS "${link_flags}")
-  TARGET_LINK_LIBRARIES (forte ${LINK_LIBRARY})
+
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+  nk_build_edl_files (forte_edl_files NK_MODULE "FORTE" EDL "${CMAKE_SOURCE_DIR}/resources/edl/Forte.edl")
+
+  ADD_DEPENDENCIES (forte forte_edl_files)
+endif()
+
+  TARGET_LINK_LIBRARIES (forte ${LINK_LIBRARY} ${${PROJECT_NAME}_LIBS} ${vfs_CLIENT_LIB})
+
+#  TARGET_LINK_LIBRARIES (forte ${LINK_LIBRARY})
+
+  set_target_properties (forte PROPERTIES ${vfs_ENTITY}_REPLACEMENT "")
+
+#  include(CMakePrintHelpers)
+#  cmake_print_variables(forte_edl_files)
+#  message("Helloooooooooooooooooooooooooooo")
+
+
+#add_dependencies (Server server_edl_files)
+#target_link_libraries (Server ${${PROJECT_NAME}_LIBS} ${vfs_CLIENT_LIB})
+#set_target_properties (Server PROPERTIES ${vfs_ENTITY}_REPLACEMENT "")
+
+
   ADD_DEPENDENCIES (forte FORTE_LITE)
   install(TARGETS forte RUNTIME DESTINATION bin)
   message("Building executable")
@@ -292,7 +325,14 @@ endif(FORTE_BUILD_SHARED_LIBRARY)
 #######################################################################################
 
 #forte init is needed for the temporary forte library, which then is linked to the main.cpp
-ADD_CUSTOM_TARGET(forte_init_generator COMMAND ${CMAKE_COMMAND} -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_SOURCE_DIR}" -DFORTE_USE_64BIT_DATATYPES:STRING="${FORTE_USE_64BIT_DATATYPES}" -DFORTE_USE_REAL_DATATYPE:STRING="${FORTE_USE_REAL_DATATYPE}" -DFORTE_USE_LREAL_DATATYPE:STRING="${FORTE_USE_LREAL_DATATYPE}" -DFORTE_SUPPORT_ARRAYS:STRING="${FORTE_SUPPORT_ARRAYS}" -DFORTE_LITTLE_ENDIAN:STRING=${FORTE_LITTLE_ENDIAN} -DFORTE_BIG_ENDIAN:STRING=${FORTE_BIG_ENDIAN} -DFORTE_LOGLEVEL:STRING="${FORTE_LOGLEVEL}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_init.cmake)  #
+
+
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+ADD_CUSTOM_TARGET(forte_init_generator COMMAND ${CMAKE_COMMAND} -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_SOURCE_DIR}/forte" -DFORTE_USE_64BIT_DATATYPES:STRING="${FORTE_USE_64BIT_DATATYPES}" -DFORTE_USE_REAL_DATATYPE:STRING="${FORTE_USE_REAL_DATATYPE}" -DFORTE_USE_LREAL_DATATYPE:STRING="${FORTE_USE_LREAL_DATATYPE}" -DFORTE_SUPPORT_ARRAYS:STRING="${FORTE_SUPPORT_ARRAYS}" -DFORTE_LITTLE_ENDIAN:STRING=${FORTE_LITTLE_ENDIAN} -DFORTE_BIG_ENDIAN:STRING=${FORTE_BIG_ENDIAN} -DFORTE_LOGLEVEL:STRING="${FORTE_LOGLEVEL}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_init.cmake)  #
+else()
+ADD_CUSTOM_TARGET(forte_init_generator COMMAND ${CMAKE_COMMAND} -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_SOURCE_DIR}" -DFORTE_USE_64BIT_DATATYPES:STRING="${FORTE_USE_64BIT_DATATYPES}" -DFORTE_USE_REAL_DATATYPE:STRING="${FORTE_USE_REAL_DATATYPE}" -DFORTE_USE_LREAL_DATATYPE:STRING="${FORTE_USE_LREAL_DATATYPE}" -DFORTE_SUPPORT_ARRAYS:STRING="${FORTE_SUPPORT_ARRAYS}" -DFORTE_LITTLE_ENDIAN:STRING=${FORTE_LITTLE_ENDIAN} -DFORTE_BIG_ENDIAN:STRING=${FORTE_BIG_ENDIAN} -DFORTE_LOGLEVEL:STRING="${FORTE_LOGLEVEL}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_init.cmake) 
+endif()
+
 ADD_DEPENDENCIES (forte_init_generator forte_generate_modules_cmake_files)
 ADD_DEPENDENCIES (FORTE_LITE forte_init_generator)
 
@@ -300,7 +340,12 @@ ADD_CUSTOM_TARGET(forte_generate_modules_cmake_files COMMAND ${CMAKE_COMMAND}
   -DFORTE_MODULE_LIST:LISTS="${FORTE_MODULE_LIST}"
   -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_modules_cmake_file.cmake)
 
+
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+ADD_CUSTOM_TARGET(forte_stringlist_generator COMMAND ${CMAKE_COMMAND} -DFORTE_LINKED_STRINGDICT:STRING="${FORTE_LINKED_STRINGDICT}" -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_CURRENT_SOURCE_DIR}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_stringlist.cmake)
+else()
 ADD_CUSTOM_TARGET(forte_stringlist_generator COMMAND ${CMAKE_COMMAND} -DFORTE_LINKED_STRINGDICT:STRING="${FORTE_LINKED_STRINGDICT}" -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_CURRENT_SOURCE_DIR}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_stringlist.cmake)
+endif()
 ADD_DEPENDENCIES (FORTE_LITE forte_stringlist_generator)
 ADD_DEPENDENCIES (forte_stringlist_generator forte_generate_modules_cmake_files)
 
diff --git a/src/arch/kos/CMakeLists.txt b/src/arch/kos/CMakeLists.txt
index beaf64f2..2c8088ee 100644
--- a/src/arch/kos/CMakeLists.txt
+++ b/src/arch/kos/CMakeLists.txt
@@ -19,6 +19,25 @@ if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
 
   forte_add_include_directories(${CMAKE_CURRENT_SOURCE_DIR})
   
+#  include (platform/nk)
+#  nk_build_edl_files (forte_edl_files NK_MODULE "forte" EDL "${CMAKE_SOURCE_DIR}/resources/edl/Forte.edl")
+
+#include(CMakePrintHelpers)
+#cmake_print_variables(forte_edl_files)
+#cmake_print_variables(CMAKE_SOURCE_DIR)
+
+
+
+#forte_add_dependencies (server_edl_files)
+#forte_add_link_library (${${PROJECT_NAME}_LIBS})
+#forte_add_link_library (${vfs_CLIENT_LIB})
+
+
+
+#  forte_add_sourcefile_hcpp(forte_edl_files)
+
+  forte_add_include_directories(${CMAKE_BINARY_DIR})
+
   forte_set_timer(pctimeha)
   
   forte_add_sourcefile_hcpp(forte_thread forte_sync forte_sem)
diff --git a/src/arch/kos/main.cpp b/src/arch/kos/main.cpp
index 9afb16e6..04594f94 100644
--- a/src/arch/kos/main.cpp
+++ b/src/arch/kos/main.cpp
@@ -72,10 +72,15 @@ void createDev(const char *pa_acMGRID){
   delete poDev;
 }
 
-int main(int argc, char *arg[]){
-
+int main(int argc, char *arg[]){
+   while(1);
+  
+  DEVLOG_INFO("FORTE try start....\n");
+
+
+
   checkEndianess();
-
+
 #ifdef FORTE_ROS
   if(argc <= 1){ //! Default Value (localhost:61499)
     std::string rosdistro = "indigo";
diff --git a/src/arch/posix/CMakeLists.txt b/src/arch/posix/CMakeLists.txt
index 720b06e5..563e4688 100644
--- a/src/arch/posix/CMakeLists.txt
+++ b/src/arch/posix/CMakeLists.txt
@@ -47,7 +47,7 @@ if("${FORTE_ARCHITECTURE}" STREQUAL "Posix")
   ENDIF(FORTE_POSIX_GENERATE_MAP_FILE)  
   
   forte_add_link_library("-lpthread") 
-  forte_add_link_library("-lrt") 
+#  forte_add_link_library("-lrt") 
 
 
   forte_add_network_layer(SER OFF "ser" CPosixSerCommLayer posixsercommlayer "Enable Forte serial line communication")
-- 
2.17.1


From 8a2c626e0b6c78cddcecbfb533e0836cceca0079 Mon Sep 17 00:00:00 2001
From: Alex Maksimov <almaximort@yandex.ru>
Date: Tue, 28 Jun 2022 12:08:28 +0300
Subject: [PATCH 3/3] This version can work under KOS, but contains ugly hack
 with Forte.edl copy in CMakeList.txt

---
 CMakeLists.txt        |  49 +++++++++---------
 src/CMakeLists.txt    | 112 ++++++++++++++++++++++--------------------
 src/arch/kos/main.cpp |  23 +++++----
 3 files changed, 94 insertions(+), 90 deletions(-)

diff --git a/CMakeLists.txt b/CMakeLists.txt
index 0a6f653a..e98da488 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -17,15 +17,15 @@
 CMAKE_MINIMUM_REQUIRED(VERSION 2.6)
 
 PROJECT(FORTE)
-
-include(CMakePrintHelpers)
-cmake_print_variables(FORTE_ARCHITECTURE)
-
-#include (platform/nk)
-#nk_build_edl_files (forte_edl_files NK_MODULE "forte" EDL "${CMAKE_SOURCE_DIR}/resources/edl/Forte.edl")
-
-
-
+
+include(CMakePrintHelpers)
+cmake_print_variables(FORTE_ARCHITECTURE)
+
+#include (platform/nk)
+#nk_build_edl_files (forte_edl_files NK_MODULE "forte" EDL "${CMAKE_SOURCE_DIR}/resources/edl/Forte.edl")
+
+
+
 set(FORTE_USE_STD_11 OFF CACHE BOOL "Enable c++11 for the project")
 mark_as_advanced(FORTE_USE_STD_11)
 
@@ -148,11 +148,11 @@ if (WIN32)
     mark_as_advanced(FORTE_ADDITIONAL_CXX_FLAGS)
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${FORTE_ADDITIONAL_CXX_FLAGS}")
   endif(MSVC)
-
-  option(FORTE_WINDOWS_XP_COMPAT OFF "Enable some workarounds for Windows XP compatibility")
-  if (FORTE_WINDOWS_XP_COMPAT)
-    add_definitions(-DWINDOWS_XP_COMPAT=1)
-  endif()
+
+  option(FORTE_WINDOWS_XP_COMPAT OFF "Enable some workarounds for Windows XP compatibility")
+  if (FORTE_WINDOWS_XP_COMPAT)
+    add_definitions(-DWINDOWS_XP_COMPAT=1)
+  endif()
 endif(WIN32)
 
 #######################################################################################
@@ -175,12 +175,12 @@ else()
   unset(LUAJIT_MATH_LIBRARY CACHE)
 endif(NOT ("${FORTE_USE_LUATYPES}" STREQUAL "None"))
 
-#######################################################################################
-# Early definition of option how to generate stringlist for every source file
-#######################################################################################
-SET(FORTE_LINKED_STRINGDICT ON CACHE BOOL "FORTE will resolve references to the stringdict at link-stage and not compile-stage. This will reduce compiletime if the stringdict changes.")
-mark_as_advanced(FORTE_LINKED_STRINGDICT)
-
+#######################################################################################
+# Early definition of option how to generate stringlist for every source file
+#######################################################################################
+SET(FORTE_LINKED_STRINGDICT ON CACHE BOOL "FORTE will resolve references to the stringdict at link-stage and not compile-stage. This will reduce compiletime if the stringdict changes.")
+mark_as_advanced(FORTE_LINKED_STRINGDICT)
+
 #######################################################################################
 # Add subdirectories
 #######################################################################################
@@ -302,9 +302,9 @@ FOREACH( FBLIB_FILE ${SOURCE_FILES_TMP})
 ENDFOREACH(FBLIB_FILE)
 LIST(REMOVE_DUPLICATES SOURCE_FILES)
 
-#######################################################################################
-# Generate stringlist for every source file
-#######################################################################################
+#######################################################################################
+# Generate stringlist for every source file
+#######################################################################################
 SET(FORTE_MODIFY_SOURCES_ON_MISSING_GENERATED_INCLUDES ON CACHE BOOL "FORTE change the source-files if includes for the generated includes are missing.")
 mark_as_advanced(FORTE_MODIFY_SOURCES_ON_MISSING_GENERATED_INCLUDES)
 
@@ -328,7 +328,8 @@ if(FORTE_LINKED_STRINGDICT)
   add_library(forte_stringlist_externals STATIC ${SOURCE_FILES})
   
   if(FORTE_BUILD_EXECUTABLE)
-      ADD_DEPENDENCIES (forte forte_stringlist_externals)
+      #ADD_DEPENDENCIES (forte forte_stringlist_externals)
+      ADD_DEPENDENCIES (Forte forte_stringlist_externals)#forte -> Forte in Src cmake
   endif(FORTE_BUILD_EXECUTABLE)
 
   if(FORTE_BUILD_STATIC_LIBRARY)
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index 6ca49b95..64ce6718 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -1,22 +1,22 @@
 #*******************************************************************************
 # Copyright (c) 2010 - 2014 Profactor GmbH, ACIN, nxtControl GmbH, fortiss GmbH
-# This program and the accompanying materials are made available under the
-# terms of the Eclipse Public License 2.0 which is available at
-# http://www.eclipse.org/legal/epl-2.0.
-#
+# This program and the accompanying materials are made available under the
+# terms of the Eclipse Public License 2.0 which is available at
+# http://www.eclipse.org/legal/epl-2.0.
+#
 # SPDX-License-Identifier: EPL-2.0
-# 
-# Contributors:
+# 
+# Contributors:
 #    Micheal Hofmann, Alois Zoitl, Stanislav Meduna, Gerhard Ebenhofer, 
 # *   Matthias Plasch
 # *     - initial API and implementation and/or initial documentation
 # *******************************************************************************/
 
-
-if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
-include (platform/nk)
-endif()
-
+
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+include (platform/nk)
+endif()
+
 set(FORTE_EXTERNAL_MODULES_DIRECTORY "" CACHE PATH "Path to a directory with FORTE modules located outside of the FORTE source code")
 SET(FORTE_MODULE_LIST modules;com;external)
 forte_create_modules_file("${FORTE_MODULE_LIST}")
@@ -236,14 +236,14 @@ SET(WRITE_FILE "")
 FOREACH(FILE ${SOURCE_FILES})
   SET(WRITE_FILE "${WRITE_FILE}${FILE}\n")
 ENDFOREACH(FILE)
-FILE(WRITE ${CMAKE_BINARY_DIR}/file_list.txt "${WRITE_FILE}")
-
-
-include(CMakePrintHelpers)
-message("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRr")
-cmake_print_variables(CMAKE_BINARY_DIR)
-
-
+FILE(WRITE ${CMAKE_BINARY_DIR}/file_list.txt "${WRITE_FILE}")
+
+
+include(CMakePrintHelpers)
+message("RRRRRRRRRRRRRRRRRRRRRRRRRRRRRr")
+cmake_print_variables(CMAKE_BINARY_DIR)
+
+
 ######################################################################################
 # Architecutre to build forte on
 ######################################################################################
@@ -272,33 +272,37 @@ GET_PROPERTY(link_flags GLOBAL PROPERTY FORTE_LINK_FLAGS)
 add_library(FORTE_LITE OBJECT ${SOURCE_FILES}) #no executables.
 
 if(FORTE_BUILD_EXECUTABLE)
-  ADD_EXECUTABLE (forte $<TARGET_OBJECTS:FORTE_LITE> ${SOURCE_EXECUTABLE_CPP} ${FORTE_EXECUTABLE_H})
-  set_target_properties(forte PROPERTIES LINK_FLAGS "${link_flags}")
-
-if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+  ADD_EXECUTABLE (Forte $<TARGET_OBJECTS:FORTE_LITE> ${SOURCE_EXECUTABLE_CPP} ${FORTE_EXECUTABLE_H})### f -> F
+  set_target_properties(Forte PROPERTIES LINK_FLAGS "${link_flags}")###
+
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+  message(" Try copy edl Helloooooooooooooooooooooooooooo")
   nk_build_edl_files (forte_edl_files NK_MODULE "FORTE" EDL "${CMAKE_SOURCE_DIR}/resources/edl/Forte.edl")
+  message("Helloooooooooooooooooooooooooooo")
+  execute_process( COMMAND ${CMAKE_COMMAND} -E copy "${CMAKE_SOURCE_DIR}/resources/edl/Forte.edl" ${CMAKE_SOURCE_DIR}/build/_headers_/forte/Forte.edl)
 
-  ADD_DEPENDENCIES (forte forte_edl_files)
-endif()
-
-  TARGET_LINK_LIBRARIES (forte ${LINK_LIBRARY} ${${PROJECT_NAME}_LIBS} ${vfs_CLIENT_LIB})
-
-#  TARGET_LINK_LIBRARIES (forte ${LINK_LIBRARY})
-
-  set_target_properties (forte PROPERTIES ${vfs_ENTITY}_REPLACEMENT "")
-
-#  include(CMakePrintHelpers)
-#  cmake_print_variables(forte_edl_files)
-#  message("Helloooooooooooooooooooooooooooo")
-
-
-#add_dependencies (Server server_edl_files)
-#target_link_libraries (Server ${${PROJECT_NAME}_LIBS} ${vfs_CLIENT_LIB})
-#set_target_properties (Server PROPERTIES ${vfs_ENTITY}_REPLACEMENT "")
 
-
-  ADD_DEPENDENCIES (forte FORTE_LITE)
-  install(TARGETS forte RUNTIME DESTINATION bin)
+  ADD_DEPENDENCIES (Forte forte_edl_files)###
+endif()
+
+  TARGET_LINK_LIBRARIES (Forte ${LINK_LIBRARY} ${${PROJECT_NAME}_LIBS} ${vfs_CLIENT_LIB})###
+
+#  TARGET_LINK_LIBRARIES (forte ${LINK_LIBRARY})
+
+  set_target_properties (Forte PROPERTIES ${vfs_ENTITY}_REPLACEMENT "")###
+
+#  include(CMakePrintHelpers)
+#  cmake_print_variables(forte_edl_files)
+#  message("Helloooooooooooooooooooooooooooo")
+
+
+#add_dependencies (Server server_edl_files)
+#target_link_libraries (Server ${${PROJECT_NAME}_LIBS} ${vfs_CLIENT_LIB})
+#set_target_properties (Server PROPERTIES ${vfs_ENTITY}_REPLACEMENT "")
+
+
+  ADD_DEPENDENCIES (Forte FORTE_LITE)###
+  install(TARGETS Forte RUNTIME DESTINATION bin)###
   message("Building executable")
 endif(FORTE_BUILD_EXECUTABLE)
 
@@ -325,14 +329,14 @@ endif(FORTE_BUILD_SHARED_LIBRARY)
 #######################################################################################
 
 #forte init is needed for the temporary forte library, which then is linked to the main.cpp
-
-
-if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+
+
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
 ADD_CUSTOM_TARGET(forte_init_generator COMMAND ${CMAKE_COMMAND} -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_SOURCE_DIR}/forte" -DFORTE_USE_64BIT_DATATYPES:STRING="${FORTE_USE_64BIT_DATATYPES}" -DFORTE_USE_REAL_DATATYPE:STRING="${FORTE_USE_REAL_DATATYPE}" -DFORTE_USE_LREAL_DATATYPE:STRING="${FORTE_USE_LREAL_DATATYPE}" -DFORTE_SUPPORT_ARRAYS:STRING="${FORTE_SUPPORT_ARRAYS}" -DFORTE_LITTLE_ENDIAN:STRING=${FORTE_LITTLE_ENDIAN} -DFORTE_BIG_ENDIAN:STRING=${FORTE_BIG_ENDIAN} -DFORTE_LOGLEVEL:STRING="${FORTE_LOGLEVEL}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_init.cmake)  #
-else()
-ADD_CUSTOM_TARGET(forte_init_generator COMMAND ${CMAKE_COMMAND} -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_SOURCE_DIR}" -DFORTE_USE_64BIT_DATATYPES:STRING="${FORTE_USE_64BIT_DATATYPES}" -DFORTE_USE_REAL_DATATYPE:STRING="${FORTE_USE_REAL_DATATYPE}" -DFORTE_USE_LREAL_DATATYPE:STRING="${FORTE_USE_LREAL_DATATYPE}" -DFORTE_SUPPORT_ARRAYS:STRING="${FORTE_SUPPORT_ARRAYS}" -DFORTE_LITTLE_ENDIAN:STRING=${FORTE_LITTLE_ENDIAN} -DFORTE_BIG_ENDIAN:STRING=${FORTE_BIG_ENDIAN} -DFORTE_LOGLEVEL:STRING="${FORTE_LOGLEVEL}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_init.cmake) 
-endif()
-
+else()
+ADD_CUSTOM_TARGET(forte_init_generator COMMAND ${CMAKE_COMMAND} -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_SOURCE_DIR}" -DFORTE_USE_64BIT_DATATYPES:STRING="${FORTE_USE_64BIT_DATATYPES}" -DFORTE_USE_REAL_DATATYPE:STRING="${FORTE_USE_REAL_DATATYPE}" -DFORTE_USE_LREAL_DATATYPE:STRING="${FORTE_USE_LREAL_DATATYPE}" -DFORTE_SUPPORT_ARRAYS:STRING="${FORTE_SUPPORT_ARRAYS}" -DFORTE_LITTLE_ENDIAN:STRING=${FORTE_LITTLE_ENDIAN} -DFORTE_BIG_ENDIAN:STRING=${FORTE_BIG_ENDIAN} -DFORTE_LOGLEVEL:STRING="${FORTE_LOGLEVEL}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_init.cmake) 
+endif()
+
 ADD_DEPENDENCIES (forte_init_generator forte_generate_modules_cmake_files)
 ADD_DEPENDENCIES (FORTE_LITE forte_init_generator)
 
@@ -340,12 +344,12 @@ ADD_CUSTOM_TARGET(forte_generate_modules_cmake_files COMMAND ${CMAKE_COMMAND}
   -DFORTE_MODULE_LIST:LISTS="${FORTE_MODULE_LIST}"
   -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_modules_cmake_file.cmake)
 
-
-if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
+
+if("${FORTE_ARCHITECTURE}" STREQUAL "kos")
 ADD_CUSTOM_TARGET(forte_stringlist_generator COMMAND ${CMAKE_COMMAND} -DFORTE_LINKED_STRINGDICT:STRING="${FORTE_LINKED_STRINGDICT}" -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_CURRENT_SOURCE_DIR}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_stringlist.cmake)
-else()
+else()
 ADD_CUSTOM_TARGET(forte_stringlist_generator COMMAND ${CMAKE_COMMAND} -DFORTE_LINKED_STRINGDICT:STRING="${FORTE_LINKED_STRINGDICT}" -DFORTE_BINARY_DIR:STRING="${CMAKE_BINARY_DIR}" -DFORTE_SOURCE_DIR:STRING="${CMAKE_CURRENT_SOURCE_DIR}" -P ${FORTE_BUILDSUPPORT_DIRECTORY}/generate_stringlist.cmake)
-endif()
+endif()
 ADD_DEPENDENCIES (FORTE_LITE forte_stringlist_generator)
 ADD_DEPENDENCIES (forte_stringlist_generator forte_generate_modules_cmake_files)
 
diff --git a/src/arch/kos/main.cpp b/src/arch/kos/main.cpp
index 04594f94..2cd2b55e 100644
--- a/src/arch/kos/main.cpp
+++ b/src/arch/kos/main.cpp
@@ -1,9 +1,9 @@
 /*******************************************************************************
  * Copyright (c) 2006 - 2018 ACIN, Profactor GmbH, AIT, fortiss GmbH
- * This program and the accompanying materials are made available under the
- * terms of the Eclipse Public License 2.0 which is available at
- * http://www.eclipse.org/legal/epl-2.0.
- *
+ * This program and the accompanying materials are made available under the
+ * terms of the Eclipse Public License 2.0 which is available at
+ * http://www.eclipse.org/legal/epl-2.0.
+ *
  * SPDX-License-Identifier: EPL-2.0
  *
  * Contributors:
@@ -72,15 +72,14 @@ void createDev(const char *pa_acMGRID){
   delete poDev;
 }
 
-int main(int argc, char *arg[]){
-   while(1);
-  
-  DEVLOG_INFO("FORTE try start....\n");
-
-
-
+int main(int argc, char *arg[]){
+  
+  DEVLOG_INFO("FORTE try start....\n");
+
+
+
   checkEndianess();
-
+
 #ifdef FORTE_ROS
   if(argc <= 1){ //! Default Value (localhost:61499)
     std::string rosdistro = "indigo";
-- 
2.17.1

